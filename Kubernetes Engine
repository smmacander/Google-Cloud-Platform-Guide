CREATING A SIMPLE APPLICATION USING GKE
Click on Navigation menu in the top left corner.
Scroll down to More products and click on it.
Click on Kubernetes Engine.
Click on Activate Cloud Shell in the top right corner.
The Cloud Shell window will load at the bottom of your screen.  Enter the command "mkdir gke-app" to create a directory named gke-app.
Enter "cd gke-app" to change the directory to your created directory.
Set the Project ID variable to your Project ID, which we will use later in the commands. 
  Instead of rewriting the project id every time, we can re-use using a variable. 
  Replace the project id in the command "export project_id=<project_id>" with your project id.
Enter the command "nano app.py" to create a file app.py and open it in a text editor.
Enter the code below which will print "Hello World".  After writing the code, press CTRL+O to save then press Enter.  Press CTRL+X to exit the editor.
  CODE:
  from flask import Flask
  # If `entrypoint` is not defined in app.yaml, GKE will look for an app
  # called `app` in `main.py`.
  app = Flask(__name__)
  @app.route('/', methods=['GET'])
  def hello():
    """Return a friendly HTTP greeting."""
    return 'Hello World!\n'
  if __name__ == '__main__':
    # Used when running locally only. When deploying to Google App
    # Engine, a webserver process such as Gunicorn will serve the app. This
    # can be configured by adding an `entrypoint` to app.yaml.
    app.run(host='localhost', port=8080, debug=True)
Enter "nano Dockerfile" to create a file named Dockerfile and open it in a text editor.
Enter the below code in the Dockerfile.  You can ignore the comments which are for your understanding only.  
  After writing the code, press CTRL+O to save, then press Enter. Press CTRL+X to exit the editor.
  CODE:
  # Using an official lightweight Python image.
  FROM python:3.7-slim
  # Installing dependencies.
  RUN pip install Flask gunicorn
  # Copy local code to the container image.
  WORKDIR /app
  COPY . .
  ENV PORT 8080
  # To Run the web service on container startup. Here we use the gunicorn
  CMD exec gunicorn --bind 0.0.0.0:$PORT --workers 1 --threads 8 --timeout 0 app:app
